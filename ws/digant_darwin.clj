;; gorilla-repl.fileformat = 1

;; **
;;; 
;; **

;; **
;;; # Dig tries Darwin
;;; Use Darwin to evolve a sine wave, using functions from the sr-basics Symbolic Regression worksheet as a basis.  We need four things to run the evolution: 
;;;  - a score function which measures how well a candidate individual is doing at meeting the goal;
;;;  - a function to create a random individual;
;;;  - a function to mutate an individual;
;;;  - a function to breed two individuals to make two more.
;; **

;; @@
(ns digant-darwin
  (:require [gorilla-plot.core :as plot]
  			[darwin.core :as darwin]
            [darwin.evolution.metrics :as metrics]
  			[clojure.repl :as repl]
            [clojure.pprint :as pprint]
            [clojure.walk :as walk]
            [clojure.zip :as zip]
            [gorilla-plot.core :as plot]
            [gorilla-repl.table :as table]
            [gorilla-repl.html :as html]
            [sr-basics.render :as render]))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; **
;;; ** Borrowing some tools from Symbolic Regression Worksheet **
;;; 
;;; modify the division operator to side-step the problem of dividing by zero
;; **

;; @@
(defn pdiv [x y] (if (zero? y) 1 (/ x y)))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/pdiv</span>","value":"#'digant-darwin/pdiv"}
;; <=

;; **
;;; Adding mathematical operators required to build solutions as a list of maps. Each map gives the name of the function and the arity (number of arguments it takes).
;; **

;; @@
(def functions
  [{:name '+ :arity 2}
   {:name '- :arity 2}
   {:name '* :arity 2}
   {:name 'pdiv :arity 2}])
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/functions</span>","value":"#'digant-darwin/functions"}
;; <=

;; **
;;; Also need something to give as arguments to these function
;; **

;; @@
(def terminals
  [(constantly 'x)
   rand])
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/terminals</span>","value":"#'digant-darwin/terminals"}
;; <=

;; **
;;; # Generating a population
;;; 
;;; Next we want to create a function that can generate a random function, and then use that function to generate an initial population. 
;; **

;; @@
(defn random-full-tree
  [functions terminals depth]
  (if (= depth 0)
    ;; note that the elements of terminals are _functions_ that generate the terminal, hence the
    ;; double brackets on the line below
    ((rand-nth terminals))
    (let [func (rand-nth functions)
          leaves (repeatedly (:arity func) #(random-full-tree functions terminals (- depth 1)))]
      (conj leaves (:name func)))))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/random-full-tree</span>","value":"#'digant-darwin/random-full-tree"}
;; <=

;; **
;;; Let's try and get a better look at the sort of expressions that are generated. First we define a helper function to transform a symbolic expression into a function that we can call to get its value. Many thanks to Lee Spector for an elegant implementation of this function.
;; **

;; @@
(defn functionalise [ex] (eval (list 'fn '[x] ex)))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/functionalise</span>","value":"#'digant-darwin/functionalise"}
;; <=

;; **
;;; And now to use this function to generate an initial population of candidate solutions
;; **

;; @@
(defn make-initial-population
  [n max-depth]
  (repeatedly n #(random-full-tree functions terminals (+ 1 (rand-int (- max-depth 1))))))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/make-initial-population</span>","value":"#'digant-darwin/make-initial-population"}
;; <=

;; **
;;; #Scoring the solutions
;;; 
;;; 
;;; $$ S(f) = - \sum_{i} |f(x_i) - y_i| $$
;;; 
;;; First, we create a target dataset
;; **

;; @@
(def data (doall (map (fn [x] [x (Math/sin x)]) (range 0 9.42 0.1))))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/data</span>","value":"#'digant-darwin/data"}
;; <=

;; @@
(plot/list-plot data)
;; @@
;; =>
;;; {"type":"vega","content":{"axes":[{"type":"x","scale":"x"},{"type":"y","scale":"y"}],"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":{"data":"adda1788-d91a-4810-a539-68f34da01f4f","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":{"data":"adda1788-d91a-4810-a539-68f34da01f4f","field":"data.y"}}],"marks":[{"type":"symbol","from":{"data":"adda1788-d91a-4810-a539-68f34da01f4f"},"properties":{"enter":{"x":{"field":"data.x","scale":"x"},"y":{"field":"data.y","scale":"y"},"fill":{"value":"steelblue"},"fillOpacity":{"value":1}},"update":{"shape":"circle","size":{"value":70},"stroke":{"value":"transparent"}},"hover":{"size":{"value":210},"stroke":{"value":"white"}}}}],"data":[{"name":"adda1788-d91a-4810-a539-68f34da01f4f","values":[{"x":0,"y":0.0},{"x":0.1,"y":0.09983341664682815},{"x":0.2,"y":0.19866933079506122},{"x":0.30000000000000004,"y":0.2955202066613396},{"x":0.4,"y":0.3894183423086505},{"x":0.5,"y":0.479425538604203},{"x":0.6,"y":0.5646424733950354},{"x":0.7,"y":0.644217687237691},{"x":0.7999999999999999,"y":0.7173560908995227},{"x":0.8999999999999999,"y":0.7833269096274833},{"x":0.9999999999999999,"y":0.8414709848078964},{"x":1.0999999999999999,"y":0.8912073600614353},{"x":1.2,"y":0.9320390859672263},{"x":1.3,"y":0.963558185417193},{"x":1.4000000000000001,"y":0.9854497299884603},{"x":1.5000000000000002,"y":0.9974949866040544},{"x":1.6000000000000003,"y":0.9995736030415051},{"x":1.7000000000000004,"y":0.9916648104524686},{"x":1.8000000000000005,"y":0.973847630878195},{"x":1.9000000000000006,"y":0.9463000876874144},{"x":2.0000000000000004,"y":0.9092974268256815},{"x":2.1000000000000005,"y":0.8632093666488735},{"x":2.2000000000000006,"y":0.8084964038195899},{"x":2.3000000000000007,"y":0.7457052121767197},{"x":2.400000000000001,"y":0.6754631805511504},{"x":2.500000000000001,"y":0.5984721441039558},{"x":2.600000000000001,"y":0.5155013718214634},{"x":2.700000000000001,"y":0.42737988023382895},{"x":2.800000000000001,"y":0.33498815015590383},{"x":2.9000000000000012,"y":0.23924932921398112},{"x":3.0000000000000013,"y":0.1411200080598659},{"x":3.1000000000000014,"y":0.04158066243328916},{"x":3.2000000000000015,"y":-0.05837414342758142},{"x":3.3000000000000016,"y":-0.15774569414324996},{"x":3.4000000000000017,"y":-0.25554110202683294},{"x":3.5000000000000018,"y":-0.3507832276896215},{"x":3.600000000000002,"y":-0.44252044329485407},{"x":3.700000000000002,"y":-0.5298361409084948},{"x":3.800000000000002,"y":-0.6118578909427207},{"x":3.900000000000002,"y":-0.6877661591839753},{"x":4.000000000000002,"y":-0.7568024953079294},{"x":4.100000000000001,"y":-0.8182771110644114},{"x":4.200000000000001,"y":-0.8715757724135886},{"x":4.300000000000001,"y":-0.9161659367494552},{"x":4.4,"y":-0.9516020738895161},{"x":4.5,"y":-0.977530117665097},{"x":4.6,"y":-0.9936910036334644},{"x":4.699999999999999,"y":-0.9999232575641008},{"x":4.799999999999999,"y":-0.9961646088358408},{"x":4.899999999999999,"y":-0.9824526126243328},{"x":4.999999999999998,"y":-0.958924274663139},{"x":5.099999999999998,"y":-0.9258146823277331},{"x":5.1999999999999975,"y":-0.8834546557201545},{"x":5.299999999999997,"y":-0.8322674422239027},{"x":5.399999999999997,"y":-0.7727644875559894},{"x":5.4999999999999964,"y":-0.7055403255703945},{"x":5.599999999999996,"y":-0.6312666378723244},{"x":5.699999999999996,"y":-0.5506855425976414},{"x":5.799999999999995,"y":-0.4646021794137613},{"x":5.899999999999995,"y":-0.37387666483024096},{"x":5.999999999999995,"y":-0.27941549819893097},{"x":6.099999999999994,"y":-0.18216250427210112},{"x":6.199999999999994,"y":-0.0830894028175026},{"x":6.299999999999994,"y":0.016813900484343496},{"x":6.399999999999993,"y":0.11654920485048659},{"x":6.499999999999993,"y":0.21511998808780858},{"x":6.5999999999999925,"y":0.3115413635133711},{"x":6.699999999999992,"y":0.40484992061659103},{"x":6.799999999999992,"y":0.4941133511386012},{"x":6.8999999999999915,"y":0.5784397643881929},{"x":6.999999999999991,"y":0.6569865987187824},{"x":7.099999999999991,"y":0.7289690401258698},{"x":7.19999999999999,"y":0.7936678638491472},{"x":7.29999999999999,"y":0.8504366206285593},{"x":7.39999999999999,"y":0.8987080958116223},{"x":7.499999999999989,"y":0.9379999767747351},{"x":7.599999999999989,"y":0.9679196720314837},{"x":7.699999999999989,"y":0.9881682338769986},{"x":7.799999999999988,"y":0.9985433453746043},{"x":7.899999999999988,"y":0.9989413418397726},{"x":7.999999999999988,"y":0.9893582466233836},{"x":8.099999999999987,"y":0.9698898108450894},{"x":8.199999999999987,"y":0.9407305566797773},{"x":8.299999999999986,"y":0.9021718337562995},{"x":8.399999999999986,"y":0.8545989080882879},{"x":8.499999999999986,"y":0.7984871126234988},{"x":8.599999999999985,"y":0.734397097874123},{"x":8.699999999999985,"y":0.662969230082194},{"x":8.799999999999985,"y":0.5849171928917747},{"x":8.899999999999984,"y":0.5010208564578985},{"x":8.999999999999984,"y":0.41211848524177114},{"x":9.099999999999984,"y":0.3190983623493673},{"x":9.199999999999983,"y":0.22288991410026324},{"x":9.299999999999983,"y":0.12445442350707933},{"x":9.399999999999983,"y":0.024775425453375525}]}],"width":400,"height":247.2187957763672,"padding":{"bottom":20,"top":10,"right":10,"left":50}},"value":"#gorilla_repl.vega.VegaView{:content {:axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"adda1788-d91a-4810-a539-68f34da01f4f\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"adda1788-d91a-4810-a539-68f34da01f4f\", :field \"data.y\"}}], :marks [{:type \"symbol\", :from {:data \"adda1788-d91a-4810-a539-68f34da01f4f\"}, :properties {:enter {:x {:field \"data.x\", :scale \"x\"}, :y {:field \"data.y\", :scale \"y\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 1}}, :update {:shape \"circle\", :size {:value 70}, :stroke {:value \"transparent\"}}, :hover {:size {:value 210}, :stroke {:value \"white\"}}}}], :data [{:name \"adda1788-d91a-4810-a539-68f34da01f4f\", :values ({:x 0, :y 0.0} {:x 0.1, :y 0.09983341664682815} {:x 0.2, :y 0.19866933079506122} {:x 0.30000000000000004, :y 0.2955202066613396} {:x 0.4, :y 0.3894183423086505} {:x 0.5, :y 0.479425538604203} {:x 0.6, :y 0.5646424733950354} {:x 0.7, :y 0.644217687237691} {:x 0.7999999999999999, :y 0.7173560908995227} {:x 0.8999999999999999, :y 0.7833269096274833} {:x 0.9999999999999999, :y 0.8414709848078964} {:x 1.0999999999999999, :y 0.8912073600614353} {:x 1.2, :y 0.9320390859672263} {:x 1.3, :y 0.963558185417193} {:x 1.4000000000000001, :y 0.9854497299884603} {:x 1.5000000000000002, :y 0.9974949866040544} {:x 1.6000000000000003, :y 0.9995736030415051} {:x 1.7000000000000004, :y 0.9916648104524686} {:x 1.8000000000000005, :y 0.973847630878195} {:x 1.9000000000000006, :y 0.9463000876874144} {:x 2.0000000000000004, :y 0.9092974268256815} {:x 2.1000000000000005, :y 0.8632093666488735} {:x 2.2000000000000006, :y 0.8084964038195899} {:x 2.3000000000000007, :y 0.7457052121767197} {:x 2.400000000000001, :y 0.6754631805511504} {:x 2.500000000000001, :y 0.5984721441039558} {:x 2.600000000000001, :y 0.5155013718214634} {:x 2.700000000000001, :y 0.42737988023382895} {:x 2.800000000000001, :y 0.33498815015590383} {:x 2.9000000000000012, :y 0.23924932921398112} {:x 3.0000000000000013, :y 0.1411200080598659} {:x 3.1000000000000014, :y 0.04158066243328916} {:x 3.2000000000000015, :y -0.05837414342758142} {:x 3.3000000000000016, :y -0.15774569414324996} {:x 3.4000000000000017, :y -0.25554110202683294} {:x 3.5000000000000018, :y -0.3507832276896215} {:x 3.600000000000002, :y -0.44252044329485407} {:x 3.700000000000002, :y -0.5298361409084948} {:x 3.800000000000002, :y -0.6118578909427207} {:x 3.900000000000002, :y -0.6877661591839753} {:x 4.000000000000002, :y -0.7568024953079294} {:x 4.100000000000001, :y -0.8182771110644114} {:x 4.200000000000001, :y -0.8715757724135886} {:x 4.300000000000001, :y -0.9161659367494552} {:x 4.4, :y -0.9516020738895161} {:x 4.5, :y -0.977530117665097} {:x 4.6, :y -0.9936910036334644} {:x 4.699999999999999, :y -0.9999232575641008} {:x 4.799999999999999, :y -0.9961646088358408} {:x 4.899999999999999, :y -0.9824526126243328} {:x 4.999999999999998, :y -0.958924274663139} {:x 5.099999999999998, :y -0.9258146823277331} {:x 5.1999999999999975, :y -0.8834546557201545} {:x 5.299999999999997, :y -0.8322674422239027} {:x 5.399999999999997, :y -0.7727644875559894} {:x 5.4999999999999964, :y -0.7055403255703945} {:x 5.599999999999996, :y -0.6312666378723244} {:x 5.699999999999996, :y -0.5506855425976414} {:x 5.799999999999995, :y -0.4646021794137613} {:x 5.899999999999995, :y -0.37387666483024096} {:x 5.999999999999995, :y -0.27941549819893097} {:x 6.099999999999994, :y -0.18216250427210112} {:x 6.199999999999994, :y -0.0830894028175026} {:x 6.299999999999994, :y 0.016813900484343496} {:x 6.399999999999993, :y 0.11654920485048659} {:x 6.499999999999993, :y 0.21511998808780858} {:x 6.5999999999999925, :y 0.3115413635133711} {:x 6.699999999999992, :y 0.40484992061659103} {:x 6.799999999999992, :y 0.4941133511386012} {:x 6.8999999999999915, :y 0.5784397643881929} {:x 6.999999999999991, :y 0.6569865987187824} {:x 7.099999999999991, :y 0.7289690401258698} {:x 7.19999999999999, :y 0.7936678638491472} {:x 7.29999999999999, :y 0.8504366206285593} {:x 7.39999999999999, :y 0.8987080958116223} {:x 7.499999999999989, :y 0.9379999767747351} {:x 7.599999999999989, :y 0.9679196720314837} {:x 7.699999999999989, :y 0.9881682338769986} {:x 7.799999999999988, :y 0.9985433453746043} {:x 7.899999999999988, :y 0.9989413418397726} {:x 7.999999999999988, :y 0.9893582466233836} {:x 8.099999999999987, :y 0.9698898108450894} {:x 8.199999999999987, :y 0.9407305566797773} {:x 8.299999999999986, :y 0.9021718337562995} {:x 8.399999999999986, :y 0.8545989080882879} {:x 8.499999999999986, :y 0.7984871126234988} {:x 8.599999999999985, :y 0.734397097874123} {:x 8.699999999999985, :y 0.662969230082194} {:x 8.799999999999985, :y 0.5849171928917747} {:x 8.899999999999984, :y 0.5010208564578985} {:x 8.999999999999984, :y 0.41211848524177114} {:x 9.099999999999984, :y 0.3190983623493673} {:x 9.199999999999983, :y 0.22288991410026324} {:x 9.299999999999983, :y 0.12445442350707933} {:x 9.399999999999983, :y 0.024775425453375525})}], :width 400, :height 247.2188, :padding {:bottom 20, :top 10, :right 10, :left 50}}}"}
;; <=

;; @@
(defn score
  [data ex]
  (let [f (functionalise ex)]
    (* -1 (apply + (map #(Math/abs (- (f (first %)) (second %))) data)))))

;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/score</span>","value":"#'digant-darwin/score"}
;; <=

;; @@
(defn count-nodes
  [ex]
  (if (seq? ex)
  	(+ 1 (apply + (map count-nodes (rest ex))))
    1))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/count-nodes</span>","value":"#'digant-darwin/count-nodes"}
;; <=

;; @@
(defn score-pp
  [data ex pressure-coeff]
  (+ (score data ex) (* pressure-coeff (count-nodes ex))))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/score-pp</span>","value":"#'digant-darwin/score-pp"}
;; <=

;; **
;;; #Genetic operations
;;; 
;;; The first mechanism for doing this is mutation. There are a number of ways of doing this, and as usual we'll go for something simple. First up, helpers. We'll want to be able to act on a randomly chosen part of a tree. We'll specify a location in a tree by numbering the nodes, following a depth-first walk. We'll use the `clojure.zip` library to do the tree manipulation. We define a zipper-constructor for expressions, that will treat the expression in the way we'd expect (namely, that branch nodes are functions).
;; **

;; @@
(defn expr-zip
  [expr]
  (zip/zipper
    (constantly true)
    (fn [node] (if (seq? node) (rest node) nil))
    (fn [node children] (with-meta (conj children (first node)) (meta node)))
    expr))
 
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/expr-zip</span>","value":"#'digant-darwin/expr-zip"}
;; <=

;; **
;;; We can now easily define a `tree-replace` function, which replaces a part of the tree, specified by its depth-first index, with another given tree. We simply walk the tree to the target index, and then replace the sub-tree with the new tree.
;; **

;; @@
(defn tree-replace
  [tree index new-tree]
  (let [subtree-z (nth (iterate zip/next (expr-zip tree)) index)
        new-zipper (zip/replace subtree-z new-tree)]
    (zip/root new-zipper)))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/tree-replace</span>","value":"#'digant-darwin/tree-replace"}
;; <=

;; **
;;; **Mutating an individual** 
;;; 
;;; We'll take a function as a parameter that constructs the new tree fragment.
;; **

;; @@
(defn mutate-expr
  [expr new-tree-func]
  (let [size (count-nodes expr)
        target (rand-int size)]
    (tree-replace expr target (new-tree-func))))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/mutate-expr</span>","value":"#'digant-darwin/mutate-expr"}
;; <=

;; **
;;; **Crossover function**
;;; 
;;; This takes two expressions, and returns two new expressions, constructed by picking a random subtree from both expressions and swapping them. We need one more helper, which gets the sub-tree for a given depth first index.
;; **

;; @@
(defn sub-tree
  [tree index]
  (zip/node (nth (iterate zip/next (expr-zip tree)) index)))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/sub-tree</span>","value":"#'digant-darwin/sub-tree"}
;; <=

;; @@
(defn crossover-expr
  [expr1 expr2]
  (let [size1 (count-nodes expr1)
        target1 (rand-int size1)
        size2 (count-nodes expr2)
        target2 (rand-int size2)
        subtree1 (sub-tree expr1 target1)
        subtree2 (sub-tree expr2 target2)]
    [(tree-replace expr1 target1 subtree2) (tree-replace expr2 target2 subtree1)]))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/crossover-expr</span>","value":"#'digant-darwin/crossover-expr"}
;; <=

;; **
;;; #The Genetic Algorithm
;;; 
;;; To avoid wasting time scoring the same individuals over and over again, we'll first score every expression in the population, to produce a 'scored population' map.
;; **

;; @@
(defn score-population
  [population score-func]
  (map (fn [expr] {:expr expr :score (score-func expr)}) population))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/score-population</span>","value":"#'digant-darwin/score-population"}
;; <=

;; **
;;; And now we define a tournament selector to select candidates from the population
;; **

;; @@
(defn tournament-selector
  [scored-popn tournament-size]
  (let [competitors (repeatedly tournament-size #(rand-nth scored-popn))]
    (:expr (apply max-key :score competitors))))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/tournament-selector</span>","value":"#'digant-darwin/tournament-selector"}
;; <=

;; **
;;; Now we create a function which takes a population, and creates the next generation. We configure this with three integers, the number of clones to make, the number of mutations to make, and the number of crossover pairs to make. 
;;; 
;;; For the population to be stable in size we will ensure that [`clone-n` + `mutate-n` + `2`(`crossover-n`)] add up to the initial size.
;; **

;; @@
(defn evolve
  [population config]
  (let [{:keys [score-func mutation-new-tree-func tournament-size clone-n mutate-n crossover-n]} config
        scored-popn (score-population population score-func)
        clones (repeatedly clone-n #(tournament-selector scored-popn tournament-size))
        mutations (repeatedly mutate-n 
                              #(mutate-expr 
                                (tournament-selector scored-popn tournament-size)
                                mutation-new-tree-func))
        crossovers (reduce into (repeatedly crossover-n
                               #(crossover-expr
                                 (tournament-selector scored-popn tournament-size)
                                 (tournament-selector scored-popn tournament-size))))]
    (into clones (into mutations crossovers))))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/evolve</span>","value":"#'digant-darwin/evolve"}
;; <=

;; **
;;; We memoize the score function, as the same expression will be scored many times during the run.
;; **

;; @@
(def config {:score-func (memoize #(score-pp data % -0.02))
             :mutation-new-tree-func #(random-full-tree functions terminals 4)
             :tournament-size 35
             :clone-n 25
             :crossover-n 25
             :mutate-n 25})
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/config</span>","value":"#'digant-darwin/config"}
;; <=

;; **
;;; Now we create an initial population, then evolve for a number of generations - for simplicity we just run for a fixed number of generations and then stop. We generate a list of the full population at each generation.
;; **

;; @@
(def init-pop (repeatedly 100 #(random-full-tree functions terminals 4)))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/init-pop</span>","value":"#'digant-darwin/init-pop"}
;; <=

;; @@
(time (def run-data (doall (take 100 (iterate #(evolve % config) init-pop)))))
;; @@
;; ->
;;; &quot;Elapsed time: 32532.303063 msecs&quot;
;;; 
;; <-
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/run-data</span>","value":"#'digant-darwin/run-data"}
;; <=

;; **
;;; Let's take a look at the best individual in each generation.
;; **

;; @@
(defn best-in-generation
  [pop score-func]
  (apply max-key :score (score-population pop score-func)))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/best-in-generation</span>","value":"#'digant-darwin/best-in-generation"}
;; <=

;; @@
(def bests (doall (map #(best-in-generation % (:score-func config)) run-data)))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/bests</span>","value":"#'digant-darwin/bests"}
;; <=

;; **
;;; It's interesting to look at how the fitness of the best individual improved through the generations. Here we see that it improves very rapidly for this simple target function.
;; **

;; @@
(plot/list-plot (map :score bests) :joined true)
;; @@
;; =>
;;; {"type":"vega","content":{"axes":[{"type":"x","scale":"x"},{"type":"y","scale":"y"}],"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":{"data":"11a4d8b4-25fb-48c2-a122-ff0739b585bd","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":{"data":"11a4d8b4-25fb-48c2-a122-ff0739b585bd","field":"data.y"}}],"marks":[{"type":"line","from":{"data":"11a4d8b4-25fb-48c2-a122-ff0739b585bd"},"properties":{"enter":{"x":{"field":"data.x","scale":"x"},"y":{"field":"data.y","scale":"y"},"stroke":{"value":"#FF29D2"},"strokeWidth":{"value":2},"strokeOpacity":{"value":1}}}}],"data":[{"name":"11a4d8b4-25fb-48c2-a122-ff0739b585bd","values":[{"x":0,"y":-51.52080987523972},{"x":1,"y":-49.87096508483975},{"x":2,"y":-49.758585472068695},{"x":3,"y":-49.75023591490299},{"x":4,"y":-49.584643207397356},{"x":5,"y":-49.584643207397356},{"x":6,"y":-49.584643207397356},{"x":7,"y":-49.53846389674271},{"x":8,"y":-49.53846389674271},{"x":9,"y":-49.53846389674271},{"x":10,"y":-49.53846389674271},{"x":11,"y":-49.492421281978785},{"x":12,"y":-49.492421281978785},{"x":13,"y":-49.492421281978785},{"x":14,"y":-49.458463896742714},{"x":15,"y":-49.42450651150664},{"x":16,"y":-49.42450651150664},{"x":17,"y":-49.329840500609585},{"x":18,"y":-49.329840500609585},{"x":19,"y":-49.329840500609585},{"x":20,"y":-49.329840500609585},{"x":21,"y":-49.0856150214637},{"x":22,"y":-49.0856150214637},{"x":23,"y":-47.709049589679594},{"x":24,"y":-44.948178697837186},{"x":25,"y":-44.52047354129431},{"x":26,"y":-44.14907089790982},{"x":27,"y":-43.96100299621063},{"x":28,"y":-43.86965091918091},{"x":29,"y":-43.86965091918091},{"x":30,"y":-43.32726514910138},{"x":31,"y":-43.32726514910138},{"x":32,"y":-43.32726514910138},{"x":33,"y":-43.32726514910138},{"x":34,"y":-43.32726514910138},{"x":35,"y":-43.027903650378406},{"x":36,"y":-43.027903650378406},{"x":37,"y":-43.027903650378406},{"x":38,"y":-43.027903650378406},{"x":39,"y":-42.915590754723226},{"x":40,"y":-42.915590754723226},{"x":41,"y":-42.915590754723226},{"x":42,"y":-42.915590754723226},{"x":43,"y":-42.892381128599006},{"x":44,"y":-42.892381128599006},{"x":45,"y":-42.86164480660326},{"x":46,"y":-42.86164480660326},{"x":47,"y":-42.86164480660326},{"x":48,"y":-42.86164480660326},{"x":49,"y":-42.86164480660326},{"x":50,"y":-42.86164480660326},{"x":51,"y":-42.80824454644117},{"x":52,"y":-42.793059597486945},{"x":53,"y":-42.793059597486945},{"x":54,"y":-42.702387621608906},{"x":55,"y":-42.702387621608906},{"x":56,"y":-42.702387621608906},{"x":57,"y":-42.702387621608906},{"x":58,"y":-42.68007245785983},{"x":59,"y":-42.68007245785983},{"x":60,"y":-42.68007245785983},{"x":61,"y":-42.68007245785983},{"x":62,"y":-42.68007245785983},{"x":63,"y":-42.68007245785983},{"x":64,"y":-42.68007245785983},{"x":65,"y":-42.68007245785983},{"x":66,"y":-42.68007245785983},{"x":67,"y":-42.68007245785983},{"x":68,"y":-42.68007245785983},{"x":69,"y":-42.68007245785983},{"x":70,"y":-42.68007245785983},{"x":71,"y":-42.68007245785983},{"x":72,"y":-42.68007245785983},{"x":73,"y":-42.68007245785983},{"x":74,"y":-42.68007245785983},{"x":75,"y":-42.68007245785983},{"x":76,"y":-42.641046860600866},{"x":77,"y":-42.641046860600866},{"x":78,"y":-42.641046860600866},{"x":79,"y":-42.641046860600866},{"x":80,"y":-42.641046860600866},{"x":81,"y":-42.641046860600866},{"x":82,"y":-42.641046860600866},{"x":83,"y":-42.641046860600866},{"x":84,"y":-42.641046860600866},{"x":85,"y":-42.641046860600866},{"x":86,"y":-42.641046860600866},{"x":87,"y":-42.641046860600866},{"x":88,"y":-42.641046860600866},{"x":89,"y":-42.641046860600866},{"x":90,"y":-42.641046860600866},{"x":91,"y":-42.641046860600866},{"x":92,"y":-42.641046860600866},{"x":93,"y":-42.641046860600866},{"x":94,"y":-42.641046860600866},{"x":95,"y":-42.641046860600866},{"x":96,"y":-42.641046860600866},{"x":97,"y":-42.641046860600866},{"x":98,"y":-42.641046860600866},{"x":99,"y":-42.641046860600866}]}],"width":400,"height":247.2187957763672,"padding":{"bottom":20,"top":10,"right":10,"left":50}},"value":"#gorilla_repl.vega.VegaView{:content {:axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"11a4d8b4-25fb-48c2-a122-ff0739b585bd\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"11a4d8b4-25fb-48c2-a122-ff0739b585bd\", :field \"data.y\"}}], :marks [{:type \"line\", :from {:data \"11a4d8b4-25fb-48c2-a122-ff0739b585bd\"}, :properties {:enter {:x {:field \"data.x\", :scale \"x\"}, :y {:field \"data.y\", :scale \"y\"}, :stroke {:value \"#FF29D2\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :data [{:name \"11a4d8b4-25fb-48c2-a122-ff0739b585bd\", :values ({:x 0, :y -51.52080987523972} {:x 1, :y -49.87096508483975} {:x 2, :y -49.758585472068695} {:x 3, :y -49.75023591490299} {:x 4, :y -49.584643207397356} {:x 5, :y -49.584643207397356} {:x 6, :y -49.584643207397356} {:x 7, :y -49.53846389674271} {:x 8, :y -49.53846389674271} {:x 9, :y -49.53846389674271} {:x 10, :y -49.53846389674271} {:x 11, :y -49.492421281978785} {:x 12, :y -49.492421281978785} {:x 13, :y -49.492421281978785} {:x 14, :y -49.458463896742714} {:x 15, :y -49.42450651150664} {:x 16, :y -49.42450651150664} {:x 17, :y -49.329840500609585} {:x 18, :y -49.329840500609585} {:x 19, :y -49.329840500609585} {:x 20, :y -49.329840500609585} {:x 21, :y -49.0856150214637} {:x 22, :y -49.0856150214637} {:x 23, :y -47.709049589679594} {:x 24, :y -44.948178697837186} {:x 25, :y -44.52047354129431} {:x 26, :y -44.14907089790982} {:x 27, :y -43.96100299621063} {:x 28, :y -43.86965091918091} {:x 29, :y -43.86965091918091} {:x 30, :y -43.32726514910138} {:x 31, :y -43.32726514910138} {:x 32, :y -43.32726514910138} {:x 33, :y -43.32726514910138} {:x 34, :y -43.32726514910138} {:x 35, :y -43.027903650378406} {:x 36, :y -43.027903650378406} {:x 37, :y -43.027903650378406} {:x 38, :y -43.027903650378406} {:x 39, :y -42.915590754723226} {:x 40, :y -42.915590754723226} {:x 41, :y -42.915590754723226} {:x 42, :y -42.915590754723226} {:x 43, :y -42.892381128599006} {:x 44, :y -42.892381128599006} {:x 45, :y -42.86164480660326} {:x 46, :y -42.86164480660326} {:x 47, :y -42.86164480660326} {:x 48, :y -42.86164480660326} {:x 49, :y -42.86164480660326} {:x 50, :y -42.86164480660326} {:x 51, :y -42.80824454644117} {:x 52, :y -42.793059597486945} {:x 53, :y -42.793059597486945} {:x 54, :y -42.702387621608906} {:x 55, :y -42.702387621608906} {:x 56, :y -42.702387621608906} {:x 57, :y -42.702387621608906} {:x 58, :y -42.68007245785983} {:x 59, :y -42.68007245785983} {:x 60, :y -42.68007245785983} {:x 61, :y -42.68007245785983} {:x 62, :y -42.68007245785983} {:x 63, :y -42.68007245785983} {:x 64, :y -42.68007245785983} {:x 65, :y -42.68007245785983} {:x 66, :y -42.68007245785983} {:x 67, :y -42.68007245785983} {:x 68, :y -42.68007245785983} {:x 69, :y -42.68007245785983} {:x 70, :y -42.68007245785983} {:x 71, :y -42.68007245785983} {:x 72, :y -42.68007245785983} {:x 73, :y -42.68007245785983} {:x 74, :y -42.68007245785983} {:x 75, :y -42.68007245785983} {:x 76, :y -42.641046860600866} {:x 77, :y -42.641046860600866} {:x 78, :y -42.641046860600866} {:x 79, :y -42.641046860600866} {:x 80, :y -42.641046860600866} {:x 81, :y -42.641046860600866} {:x 82, :y -42.641046860600866} {:x 83, :y -42.641046860600866} {:x 84, :y -42.641046860600866} {:x 85, :y -42.641046860600866} {:x 86, :y -42.641046860600866} {:x 87, :y -42.641046860600866} {:x 88, :y -42.641046860600866} {:x 89, :y -42.641046860600866} {:x 90, :y -42.641046860600866} {:x 91, :y -42.641046860600866} {:x 92, :y -42.641046860600866} {:x 93, :y -42.641046860600866} {:x 94, :y -42.641046860600866} {:x 95, :y -42.641046860600866} {:x 96, :y -42.641046860600866} {:x 97, :y -42.641046860600866} {:x 98, :y -42.641046860600866} {:x 99, :y -42.641046860600866})}], :width 400, :height 247.2188, :padding {:bottom 20, :top 10, :right 10, :left 50}}}"}
;; <=

;; @@
(plot/compose
 (plot/list-plot data)
 (plot/plot (functionalise (:expr (last bests))) [0 6.28]))
;; @@
;; =>
;;; {"type":"vega","content":{"width":400,"height":247.2187957763672,"padding":{"bottom":20,"top":10,"right":10,"left":50},"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":{"data":"7c1f49f3-8ed2-40dc-b6dd-105289c117a8","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":{"data":"7c1f49f3-8ed2-40dc-b6dd-105289c117a8","field":"data.y"}}],"axes":[{"type":"x","scale":"x"},{"type":"y","scale":"y"}],"data":[{"name":"7c1f49f3-8ed2-40dc-b6dd-105289c117a8","values":[{"x":0,"y":0.0},{"x":0.1,"y":0.09983341664682815},{"x":0.2,"y":0.19866933079506122},{"x":0.30000000000000004,"y":0.2955202066613396},{"x":0.4,"y":0.3894183423086505},{"x":0.5,"y":0.479425538604203},{"x":0.6,"y":0.5646424733950354},{"x":0.7,"y":0.644217687237691},{"x":0.7999999999999999,"y":0.7173560908995227},{"x":0.8999999999999999,"y":0.7833269096274833},{"x":0.9999999999999999,"y":0.8414709848078964},{"x":1.0999999999999999,"y":0.8912073600614353},{"x":1.2,"y":0.9320390859672263},{"x":1.3,"y":0.963558185417193},{"x":1.4000000000000001,"y":0.9854497299884603},{"x":1.5000000000000002,"y":0.9974949866040544},{"x":1.6000000000000003,"y":0.9995736030415051},{"x":1.7000000000000004,"y":0.9916648104524686},{"x":1.8000000000000005,"y":0.973847630878195},{"x":1.9000000000000006,"y":0.9463000876874144},{"x":2.0000000000000004,"y":0.9092974268256815},{"x":2.1000000000000005,"y":0.8632093666488735},{"x":2.2000000000000006,"y":0.8084964038195899},{"x":2.3000000000000007,"y":0.7457052121767197},{"x":2.400000000000001,"y":0.6754631805511504},{"x":2.500000000000001,"y":0.5984721441039558},{"x":2.600000000000001,"y":0.5155013718214634},{"x":2.700000000000001,"y":0.42737988023382895},{"x":2.800000000000001,"y":0.33498815015590383},{"x":2.9000000000000012,"y":0.23924932921398112},{"x":3.0000000000000013,"y":0.1411200080598659},{"x":3.1000000000000014,"y":0.04158066243328916},{"x":3.2000000000000015,"y":-0.05837414342758142},{"x":3.3000000000000016,"y":-0.15774569414324996},{"x":3.4000000000000017,"y":-0.25554110202683294},{"x":3.5000000000000018,"y":-0.3507832276896215},{"x":3.600000000000002,"y":-0.44252044329485407},{"x":3.700000000000002,"y":-0.5298361409084948},{"x":3.800000000000002,"y":-0.6118578909427207},{"x":3.900000000000002,"y":-0.6877661591839753},{"x":4.000000000000002,"y":-0.7568024953079294},{"x":4.100000000000001,"y":-0.8182771110644114},{"x":4.200000000000001,"y":-0.8715757724135886},{"x":4.300000000000001,"y":-0.9161659367494552},{"x":4.4,"y":-0.9516020738895161},{"x":4.5,"y":-0.977530117665097},{"x":4.6,"y":-0.9936910036334644},{"x":4.699999999999999,"y":-0.9999232575641008},{"x":4.799999999999999,"y":-0.9961646088358408},{"x":4.899999999999999,"y":-0.9824526126243328},{"x":4.999999999999998,"y":-0.958924274663139},{"x":5.099999999999998,"y":-0.9258146823277331},{"x":5.1999999999999975,"y":-0.8834546557201545},{"x":5.299999999999997,"y":-0.8322674422239027},{"x":5.399999999999997,"y":-0.7727644875559894},{"x":5.4999999999999964,"y":-0.7055403255703945},{"x":5.599999999999996,"y":-0.6312666378723244},{"x":5.699999999999996,"y":-0.5506855425976414},{"x":5.799999999999995,"y":-0.4646021794137613},{"x":5.899999999999995,"y":-0.37387666483024096},{"x":5.999999999999995,"y":-0.27941549819893097},{"x":6.099999999999994,"y":-0.18216250427210112},{"x":6.199999999999994,"y":-0.0830894028175026},{"x":6.299999999999994,"y":0.016813900484343496},{"x":6.399999999999993,"y":0.11654920485048659},{"x":6.499999999999993,"y":0.21511998808780858},{"x":6.5999999999999925,"y":0.3115413635133711},{"x":6.699999999999992,"y":0.40484992061659103},{"x":6.799999999999992,"y":0.4941133511386012},{"x":6.8999999999999915,"y":0.5784397643881929},{"x":6.999999999999991,"y":0.6569865987187824},{"x":7.099999999999991,"y":0.7289690401258698},{"x":7.19999999999999,"y":0.7936678638491472},{"x":7.29999999999999,"y":0.8504366206285593},{"x":7.39999999999999,"y":0.8987080958116223},{"x":7.499999999999989,"y":0.9379999767747351},{"x":7.599999999999989,"y":0.9679196720314837},{"x":7.699999999999989,"y":0.9881682338769986},{"x":7.799999999999988,"y":0.9985433453746043},{"x":7.899999999999988,"y":0.9989413418397726},{"x":7.999999999999988,"y":0.9893582466233836},{"x":8.099999999999987,"y":0.9698898108450894},{"x":8.199999999999987,"y":0.9407305566797773},{"x":8.299999999999986,"y":0.9021718337562995},{"x":8.399999999999986,"y":0.8545989080882879},{"x":8.499999999999986,"y":0.7984871126234988},{"x":8.599999999999985,"y":0.734397097874123},{"x":8.699999999999985,"y":0.662969230082194},{"x":8.799999999999985,"y":0.5849171928917747},{"x":8.899999999999984,"y":0.5010208564578985},{"x":8.999999999999984,"y":0.41211848524177114},{"x":9.099999999999984,"y":0.3190983623493673},{"x":9.199999999999983,"y":0.22288991410026324},{"x":9.299999999999983,"y":0.12445442350707933},{"x":9.399999999999983,"y":0.024775425453375525}]},{"name":"f6d82281-0c54-4da1-8b56-c651e2031247","values":[{"x":0,"y":0.0010626103691866676},{"x":0.06279999762773514,"y":0.04199994462283619},{"x":0.12559999525547028,"y":0.0935300901132311},{"x":0.1883999928832054,"y":0.15327100974248822},{"x":0.25119999051094055,"y":0.21850177467751175},{"x":0.3139999881386757,"y":0.28650059499028957},{"x":0.3767999857664108,"y":0.35482076633497767},{"x":0.43959998339414597,"y":0.42146382399713805},{"x":0.5023999810218811,"y":0.48494646726964363},{"x":0.5651999786496162,"y":0.5442836570683993},{"x":0.6279999762773514,"y":0.598920132567486},{"x":0.6907999739050865,"y":0.6486400759186196},{"x":0.7535999715328217,"y":0.6934761766144858},{"x":0.8163999691605568,"y":0.7336301021548911},{"x":0.8791999667882919,"y":0.7694090822685568},{"x":0.9419999644160271,"y":0.801178650539108},{"x":1.0047999620437622,"y":0.8293291722690177},{"x":1.0675999596714973,"y":0.8542529004646267},{"x":1.1303999572992325,"y":0.8763282825237584},{"x":1.1931999549269676,"y":0.8959086181274868},{"x":1.2559999525547028,"y":0.9133126599491898},{"x":1.318799950182438,"y":0.9288152078375769},{"x":1.381599947810173,"y":0.9426361205485779},{"x":1.4443999454379082,"y":0.9549264643371738},{"x":1.5071999430656433,"y":0.9657507912045107},{"x":1.5699999406933784,"y":0.9750649008764732},{"x":1.6327999383211136,"y":0.982689067599068},{"x":1.6955999359488487,"y":0.9882778678813918},{"x":1.7583999335765839,"y":0.9912897677218786},{"x":1.821199931204319,"y":0.9909628526859042},{"x":1.8839999288320541,"y":0.9863076009692351},{"x":1.9467999264597893,"y":0.9761327527049076},{"x":2.0095999240875244,"y":0.9591239679721587},{"x":2.0723999217152596,"y":0.9339928393793705},{"x":2.1351999193429947,"y":0.8997002293458002},{"x":2.19799991697073,"y":0.8557292139665036},{"x":2.260799914598465,"y":0.8023442738489295},{"x":2.3235999122262,"y":0.7407440011005985},{"x":2.3863999098539352,"y":0.6730220849891607},{"x":2.4491999074816704,"y":0.6019100077738818},{"x":2.5119999051094055,"y":0.5303632077307288},{"x":2.5747999027371407,"y":0.4611187949612534},{"x":2.637599900364876,"y":0.39635522388561595},{"x":2.700399897992611,"y":0.33752630121914984},{"x":2.763199895620346,"y":0.2853660454896754},{"x":2.825999893248081,"y":0.2400096563613243},{"x":2.8887998908758163,"y":0.20116345116133283},{"x":2.9515998885035515,"y":0.168271728053181},{"x":3.0143998861312866,"y":0.14065240217007316},{"x":3.0771998837590218,"y":0.11759318269448822},{"x":3.139999881386757,"y":0.09841182621643868},{"x":3.202799879014492,"y":0.08248872770957516},{"x":3.265599876642227,"y":0.06928053786796125},{"x":3.3283998742699623,"y":0.05832199475674713},{"x":3.3911998718976974,"y":0.04922118274244641},{"x":3.4539998695254326,"y":0.04165166588871811},{"x":3.5167998671531677,"y":0.035343602725589444},{"x":3.579599864780903,"y":0.03007502716274553},{"x":3.642399862408638,"y":0.025663889744739335},{"x":3.705199860036373,"y":0.021961098093228222},{"x":3.7679998576641083,"y":0.018844595248937793},{"x":3.8307998552918434,"y":0.016214411410332776},{"x":3.8935998529195786,"y":0.013988578928634072},{"x":3.9563998505473137,"y":0.012099787204708466},{"x":4.019199848175049,"y":0.010492657933902886},{"x":4.081999845802784,"y":0.009121532892480954},{"x":4.144799843430519,"y":0.007948681048357676},{"x":4.207599841058254,"y":0.0069428464968858345},{"x":4.270399838685989,"y":0.0060780722560066945},{"x":4.3331998363137245,"y":0.005332746778643377},{"x":4.39599983394146,"y":0.004688830050997936},{"x":4.458799831569195,"y":0.004131224450740247},{"x":4.52159982919693,"y":0.0036472623364995093},{"x":4.584399826824665,"y":0.0032262878525380987},{"x":4.6471998244524,"y":0.0028593148754681146},{"x":4.709999822080135,"y":0.0025387465965123275},{"x":4.7727998197078705,"y":0.0022581450889416327},{"x":4.835599817335606,"y":0.0020120414945101776},{"x":4.898399814963341,"y":0.0017957792887026397},{"x":4.961199812591076,"y":0.001605384544653717},{"x":5.023999810218811,"y":0.0014374582838976083},{"x":5.086799807846546,"y":0.00128908693800509},{"x":5.149599805474281,"y":0.0011577676959652553},{"x":5.2123998031020164,"y":0.0010413461154737964},{"x":5.275199800729752,"y":9.37963861963075E-4},{"x":5.337999798357487,"y":8.460148309543071E-4},{"x":5.400799795985222,"y":7.641082259462177E-4},{"x":5.463599793612957,"y":6.91037420524847E-4},{"x":5.526399791240692,"y":6.257536415709738E-4},{"x":5.589199788868427,"y":5.673436798172872E-4},{"x":5.651999786496162,"y":5.150109721116607E-4},{"x":5.7147997841238976,"y":4.680595126014119E-4},{"x":5.777599781751633,"y":4.25880142487553E-4},{"x":5.840399779379368,"y":3.8793884387257034E-4},{"x":5.903199777007103,"y":3.5376672564461925E-4},{"x":5.965999774634838,"y":3.229514408037437E-4},{"x":6.028799772262573,"y":2.9512981715696036E-4},{"x":6.091599769890308,"y":2.6998151851756377E-4},{"x":6.1543997675180435,"y":2.4722358275887634E-4},{"x":6.217199765145779,"y":2.2660570736467148E-4},{"x":6.279999762773514,"y":2.0790617335844638E-4}]}],"marks":[{"type":"symbol","from":{"data":"7c1f49f3-8ed2-40dc-b6dd-105289c117a8"},"properties":{"enter":{"x":{"field":"data.x","scale":"x"},"y":{"field":"data.y","scale":"y"},"fill":{"value":"steelblue"},"fillOpacity":{"value":1}},"update":{"shape":"circle","size":{"value":70},"stroke":{"value":"transparent"}},"hover":{"size":{"value":210},"stroke":{"value":"white"}}}},{"type":"line","from":{"data":"f6d82281-0c54-4da1-8b56-c651e2031247"},"properties":{"enter":{"x":{"field":"data.x","scale":"x"},"y":{"field":"data.y","scale":"y"},"stroke":{"value":"#FF29D2"},"strokeWidth":{"value":2},"strokeOpacity":{"value":1}}}}]},"value":"#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:bottom 20, :top 10, :right 10, :left 50}, :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"7c1f49f3-8ed2-40dc-b6dd-105289c117a8\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"7c1f49f3-8ed2-40dc-b6dd-105289c117a8\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}], :data ({:name \"7c1f49f3-8ed2-40dc-b6dd-105289c117a8\", :values ({:x 0, :y 0.0} {:x 0.1, :y 0.09983341664682815} {:x 0.2, :y 0.19866933079506122} {:x 0.30000000000000004, :y 0.2955202066613396} {:x 0.4, :y 0.3894183423086505} {:x 0.5, :y 0.479425538604203} {:x 0.6, :y 0.5646424733950354} {:x 0.7, :y 0.644217687237691} {:x 0.7999999999999999, :y 0.7173560908995227} {:x 0.8999999999999999, :y 0.7833269096274833} {:x 0.9999999999999999, :y 0.8414709848078964} {:x 1.0999999999999999, :y 0.8912073600614353} {:x 1.2, :y 0.9320390859672263} {:x 1.3, :y 0.963558185417193} {:x 1.4000000000000001, :y 0.9854497299884603} {:x 1.5000000000000002, :y 0.9974949866040544} {:x 1.6000000000000003, :y 0.9995736030415051} {:x 1.7000000000000004, :y 0.9916648104524686} {:x 1.8000000000000005, :y 0.973847630878195} {:x 1.9000000000000006, :y 0.9463000876874144} {:x 2.0000000000000004, :y 0.9092974268256815} {:x 2.1000000000000005, :y 0.8632093666488735} {:x 2.2000000000000006, :y 0.8084964038195899} {:x 2.3000000000000007, :y 0.7457052121767197} {:x 2.400000000000001, :y 0.6754631805511504} {:x 2.500000000000001, :y 0.5984721441039558} {:x 2.600000000000001, :y 0.5155013718214634} {:x 2.700000000000001, :y 0.42737988023382895} {:x 2.800000000000001, :y 0.33498815015590383} {:x 2.9000000000000012, :y 0.23924932921398112} {:x 3.0000000000000013, :y 0.1411200080598659} {:x 3.1000000000000014, :y 0.04158066243328916} {:x 3.2000000000000015, :y -0.05837414342758142} {:x 3.3000000000000016, :y -0.15774569414324996} {:x 3.4000000000000017, :y -0.25554110202683294} {:x 3.5000000000000018, :y -0.3507832276896215} {:x 3.600000000000002, :y -0.44252044329485407} {:x 3.700000000000002, :y -0.5298361409084948} {:x 3.800000000000002, :y -0.6118578909427207} {:x 3.900000000000002, :y -0.6877661591839753} {:x 4.000000000000002, :y -0.7568024953079294} {:x 4.100000000000001, :y -0.8182771110644114} {:x 4.200000000000001, :y -0.8715757724135886} {:x 4.300000000000001, :y -0.9161659367494552} {:x 4.4, :y -0.9516020738895161} {:x 4.5, :y -0.977530117665097} {:x 4.6, :y -0.9936910036334644} {:x 4.699999999999999, :y -0.9999232575641008} {:x 4.799999999999999, :y -0.9961646088358408} {:x 4.899999999999999, :y -0.9824526126243328} {:x 4.999999999999998, :y -0.958924274663139} {:x 5.099999999999998, :y -0.9258146823277331} {:x 5.1999999999999975, :y -0.8834546557201545} {:x 5.299999999999997, :y -0.8322674422239027} {:x 5.399999999999997, :y -0.7727644875559894} {:x 5.4999999999999964, :y -0.7055403255703945} {:x 5.599999999999996, :y -0.6312666378723244} {:x 5.699999999999996, :y -0.5506855425976414} {:x 5.799999999999995, :y -0.4646021794137613} {:x 5.899999999999995, :y -0.37387666483024096} {:x 5.999999999999995, :y -0.27941549819893097} {:x 6.099999999999994, :y -0.18216250427210112} {:x 6.199999999999994, :y -0.0830894028175026} {:x 6.299999999999994, :y 0.016813900484343496} {:x 6.399999999999993, :y 0.11654920485048659} {:x 6.499999999999993, :y 0.21511998808780858} {:x 6.5999999999999925, :y 0.3115413635133711} {:x 6.699999999999992, :y 0.40484992061659103} {:x 6.799999999999992, :y 0.4941133511386012} {:x 6.8999999999999915, :y 0.5784397643881929} {:x 6.999999999999991, :y 0.6569865987187824} {:x 7.099999999999991, :y 0.7289690401258698} {:x 7.19999999999999, :y 0.7936678638491472} {:x 7.29999999999999, :y 0.8504366206285593} {:x 7.39999999999999, :y 0.8987080958116223} {:x 7.499999999999989, :y 0.9379999767747351} {:x 7.599999999999989, :y 0.9679196720314837} {:x 7.699999999999989, :y 0.9881682338769986} {:x 7.799999999999988, :y 0.9985433453746043} {:x 7.899999999999988, :y 0.9989413418397726} {:x 7.999999999999988, :y 0.9893582466233836} {:x 8.099999999999987, :y 0.9698898108450894} {:x 8.199999999999987, :y 0.9407305566797773} {:x 8.299999999999986, :y 0.9021718337562995} {:x 8.399999999999986, :y 0.8545989080882879} {:x 8.499999999999986, :y 0.7984871126234988} {:x 8.599999999999985, :y 0.734397097874123} {:x 8.699999999999985, :y 0.662969230082194} {:x 8.799999999999985, :y 0.5849171928917747} {:x 8.899999999999984, :y 0.5010208564578985} {:x 8.999999999999984, :y 0.41211848524177114} {:x 9.099999999999984, :y 0.3190983623493673} {:x 9.199999999999983, :y 0.22288991410026324} {:x 9.299999999999983, :y 0.12445442350707933} {:x 9.399999999999983, :y 0.024775425453375525})} {:name \"f6d82281-0c54-4da1-8b56-c651e2031247\", :values ({:x 0, :y 0.0010626103691866676} {:x 0.06279999762773514, :y 0.04199994462283619} {:x 0.12559999525547028, :y 0.0935300901132311} {:x 0.1883999928832054, :y 0.15327100974248822} {:x 0.25119999051094055, :y 0.21850177467751175} {:x 0.3139999881386757, :y 0.28650059499028957} {:x 0.3767999857664108, :y 0.35482076633497767} {:x 0.43959998339414597, :y 0.42146382399713805} {:x 0.5023999810218811, :y 0.48494646726964363} {:x 0.5651999786496162, :y 0.5442836570683993} {:x 0.6279999762773514, :y 0.598920132567486} {:x 0.6907999739050865, :y 0.6486400759186196} {:x 0.7535999715328217, :y 0.6934761766144858} {:x 0.8163999691605568, :y 0.7336301021548911} {:x 0.8791999667882919, :y 0.7694090822685568} {:x 0.9419999644160271, :y 0.801178650539108} {:x 1.0047999620437622, :y 0.8293291722690177} {:x 1.0675999596714973, :y 0.8542529004646267} {:x 1.1303999572992325, :y 0.8763282825237584} {:x 1.1931999549269676, :y 0.8959086181274868} {:x 1.2559999525547028, :y 0.9133126599491898} {:x 1.318799950182438, :y 0.9288152078375769} {:x 1.381599947810173, :y 0.9426361205485779} {:x 1.4443999454379082, :y 0.9549264643371738} {:x 1.5071999430656433, :y 0.9657507912045107} {:x 1.5699999406933784, :y 0.9750649008764732} {:x 1.6327999383211136, :y 0.982689067599068} {:x 1.6955999359488487, :y 0.9882778678813918} {:x 1.7583999335765839, :y 0.9912897677218786} {:x 1.821199931204319, :y 0.9909628526859042} {:x 1.8839999288320541, :y 0.9863076009692351} {:x 1.9467999264597893, :y 0.9761327527049076} {:x 2.0095999240875244, :y 0.9591239679721587} {:x 2.0723999217152596, :y 0.9339928393793705} {:x 2.1351999193429947, :y 0.8997002293458002} {:x 2.19799991697073, :y 0.8557292139665036} {:x 2.260799914598465, :y 0.8023442738489295} {:x 2.3235999122262, :y 0.7407440011005985} {:x 2.3863999098539352, :y 0.6730220849891607} {:x 2.4491999074816704, :y 0.6019100077738818} {:x 2.5119999051094055, :y 0.5303632077307288} {:x 2.5747999027371407, :y 0.4611187949612534} {:x 2.637599900364876, :y 0.39635522388561595} {:x 2.700399897992611, :y 0.33752630121914984} {:x 2.763199895620346, :y 0.2853660454896754} {:x 2.825999893248081, :y 0.2400096563613243} {:x 2.8887998908758163, :y 0.20116345116133283} {:x 2.9515998885035515, :y 0.168271728053181} {:x 3.0143998861312866, :y 0.14065240217007316} {:x 3.0771998837590218, :y 0.11759318269448822} {:x 3.139999881386757, :y 0.09841182621643868} {:x 3.202799879014492, :y 0.08248872770957516} {:x 3.265599876642227, :y 0.06928053786796125} {:x 3.3283998742699623, :y 0.05832199475674713} {:x 3.3911998718976974, :y 0.04922118274244641} {:x 3.4539998695254326, :y 0.04165166588871811} {:x 3.5167998671531677, :y 0.035343602725589444} {:x 3.579599864780903, :y 0.03007502716274553} {:x 3.642399862408638, :y 0.025663889744739335} {:x 3.705199860036373, :y 0.021961098093228222} {:x 3.7679998576641083, :y 0.018844595248937793} {:x 3.8307998552918434, :y 0.016214411410332776} {:x 3.8935998529195786, :y 0.013988578928634072} {:x 3.9563998505473137, :y 0.012099787204708466} {:x 4.019199848175049, :y 0.010492657933902886} {:x 4.081999845802784, :y 0.009121532892480954} {:x 4.144799843430519, :y 0.007948681048357676} {:x 4.207599841058254, :y 0.0069428464968858345} {:x 4.270399838685989, :y 0.0060780722560066945} {:x 4.3331998363137245, :y 0.005332746778643377} {:x 4.39599983394146, :y 0.004688830050997936} {:x 4.458799831569195, :y 0.004131224450740247} {:x 4.52159982919693, :y 0.0036472623364995093} {:x 4.584399826824665, :y 0.0032262878525380987} {:x 4.6471998244524, :y 0.0028593148754681146} {:x 4.709999822080135, :y 0.0025387465965123275} {:x 4.7727998197078705, :y 0.0022581450889416327} {:x 4.835599817335606, :y 0.0020120414945101776} {:x 4.898399814963341, :y 0.0017957792887026397} {:x 4.961199812591076, :y 0.001605384544653717} {:x 5.023999810218811, :y 0.0014374582838976083} {:x 5.086799807846546, :y 0.00128908693800509} {:x 5.149599805474281, :y 0.0011577676959652553} {:x 5.2123998031020164, :y 0.0010413461154737964} {:x 5.275199800729752, :y 9.37963861963075E-4} {:x 5.337999798357487, :y 8.460148309543071E-4} {:x 5.400799795985222, :y 7.641082259462177E-4} {:x 5.463599793612957, :y 6.91037420524847E-4} {:x 5.526399791240692, :y 6.257536415709738E-4} {:x 5.589199788868427, :y 5.673436798172872E-4} {:x 5.651999786496162, :y 5.150109721116607E-4} {:x 5.7147997841238976, :y 4.680595126014119E-4} {:x 5.777599781751633, :y 4.25880142487553E-4} {:x 5.840399779379368, :y 3.8793884387257034E-4} {:x 5.903199777007103, :y 3.5376672564461925E-4} {:x 5.965999774634838, :y 3.229514408037437E-4} {:x 6.028799772262573, :y 2.9512981715696036E-4} {:x 6.091599769890308, :y 2.6998151851756377E-4} {:x 6.1543997675180435, :y 2.4722358275887634E-4} {:x 6.217199765145779, :y 2.2660570736467148E-4} {:x 6.279999762773514, :y 2.0790617335844638E-4})}), :marks ({:type \"symbol\", :from {:data \"7c1f49f3-8ed2-40dc-b6dd-105289c117a8\"}, :properties {:enter {:x {:field \"data.x\", :scale \"x\"}, :y {:field \"data.y\", :scale \"y\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 1}}, :update {:shape \"circle\", :size {:value 70}, :stroke {:value \"transparent\"}}, :hover {:size {:value 210}, :stroke {:value \"white\"}}}} {:type \"line\", :from {:data \"f6d82281-0c54-4da1-8b56-c651e2031247\"}, :properties {:enter {:x {:field \"data.x\", :scale \"x\"}, :y {:field \"data.y\", :scale \"y\"}, :stroke {:value \"#FF29D2\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}})}}"}
;; <=

;; **
;;; And now we take a look at the function it settled upon as the solution
;; **

;; @@
(pprint/pprint (:expr (last bests)))
;; @@
;; ->
;;; (pdiv
;;;  (+ x 0.35222478981238825)
;;;  (+
;;;   (+
;;;    (*
;;;     (*
;;;      (-
;;;       (*
;;;        (*
;;;         (*
;;;          (-
;;;           (* (* x x) (* 0.4418723502564671 0.35222478981238825))
;;;           0.35222478981238825)
;;;          (* (- x 0.4418723502564671) (* x x)))
;;;         (+
;;;          (*
;;;           (pdiv x 0.5282284968264181)
;;;           (* 0.4418723502564671 0.35222478981238825))
;;;          (- (pdiv x x) (+ 0.9789528996314396 0.4658337174830517))))
;;;        (* 0.4418723502564671 0.35222478981238825))
;;;       0.0019170311059050205)
;;;      (* x (* x x)))
;;;     0.4418723502564671)
;;;    x)
;;;   (*
;;;    (pdiv 0.1673352092952589 (+ 0.0019170311059050205 x))
;;;    (pdiv 0.8577053700587705 0.22586577675902042))))
;;; (pdiv
;;;  (+ x 0.35222478981238825)
;;;  (+
;;;   (+
;;;    (*
;;;     (*
;;;      (-
;;;       (*
;;;        (*
;;;         (*
;;;          (-
;;;           (* (* x x) (* 0.4418723502564671 0.35222478981238825))
;;;           0.35222478981238825)
;;;          (* (- x 0.4418723502564671) (* x x)))
;;;         (+
;;;          (*
;;;           (pdiv x 0.5282284968264181)
;;;           (* 0.4418723502564671 0.35222478981238825))
;;;          (- (pdiv x x) (+ 0.9789528996314396 0.4658337174830517))))
;;;        (* 0.4418723502564671 0.35222478981238825))
;;;       0.0019170311059050205)
;;;      (* x (* x x)))
;;;     0.4418723502564671)
;;;    x)
;;;   (*
;;;    (pdiv 0.1673352092952589 (+ 0.0019170311059050205 x))
;;;    (pdiv 0.8577053700587705 0.22586577675902042))))
;;; 
;; <-
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; **
;;; #Darwinning
;; **

;; **
;;; Reiterating from above, we want:
;;; 
;;;  - a score function which measures how well a candidate individual is doing at meeting the goal;
;;;  - a function to create a random individual;
;;;  - a function to mutate an individual;
;;;  - a function to breed two individuals to make two more.
;;; 
;;; ** 1. Score **
;;; 
;; **

;; @@
(defn ga-score
  [ex]
  (score data ex))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/ga-score</span>","value":"#'digant-darwin/ga-score"}
;; <=

;; **
;;; **2. Create**
;; **

;; @@
(defn ga-create 
  [depth] 
  (random-full-tree functions terminals depth))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/ga-create</span>","value":"#'digant-darwin/ga-create"}
;; <=

;; **
;;; **3. Mutate**
;; **

;; @@
(defn ga-mutate [ex] (mutate-expr ex #(random-full-tree functions terminals 3)))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/ga-mutate</span>","value":"#'digant-darwin/ga-mutate"}
;; <=

;; **
;;; **4. Cross-breed**
;; **

;; @@
(defn ga-crossover [expr1 expr2] (crossover-expr expr1 expr2))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;digant-darwin/ga-crossover</span>","value":"#'digant-darwin/ga-crossover"}
;; <=

;; **
;;; Let's see what we can do
;; **

;; @@
(def u (ga-create 3))
u
;; @@
;; =>
;;; {"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>+</span>","value":"+"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>+</span>","value":"+"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>*</span>","value":"*"},{"type":"html","content":"<span class='clj-double'>0.23381319819501967</span>","value":"0.23381319819501967"},{"type":"html","content":"<span class='clj-double'>0.6115896876169291</span>","value":"0.6115896876169291"}],"value":"(* 0.23381319819501967 0.6115896876169291)"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>pdiv</span>","value":"pdiv"},{"type":"html","content":"<span class='clj-symbol'>x</span>","value":"x"},{"type":"html","content":"<span class='clj-symbol'>x</span>","value":"x"}],"value":"(pdiv x x)"}],"value":"(+ (* 0.23381319819501967 0.6115896876169291) (pdiv x x))"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>pdiv</span>","value":"pdiv"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>*</span>","value":"*"},{"type":"html","content":"<span class='clj-symbol'>x</span>","value":"x"},{"type":"html","content":"<span class='clj-double'>0.7108711265725868</span>","value":"0.7108711265725868"}],"value":"(* x 0.7108711265725868)"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>+</span>","value":"+"},{"type":"html","content":"<span class='clj-symbol'>x</span>","value":"x"},{"type":"html","content":"<span class='clj-double'>0.23606573899488503</span>","value":"0.23606573899488503"}],"value":"(+ x 0.23606573899488503)"}],"value":"(pdiv (* x 0.7108711265725868) (+ x 0.23606573899488503))"}],"value":"(+ (+ (* 0.23381319819501967 0.6115896876169291) (pdiv x x)) (pdiv (* x 0.7108711265725868) (+ x 0.23606573899488503)))"}
;; <=

;; @@
(ga-mutate u)
;; @@
;; =>
;;; {"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>+</span>","value":"+"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>+</span>","value":"+"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>*</span>","value":"*"},{"type":"html","content":"<span class='clj-double'>0.23381319819501967</span>","value":"0.23381319819501967"},{"type":"html","content":"<span class='clj-double'>0.6115896876169291</span>","value":"0.6115896876169291"}],"value":"(* 0.23381319819501967 0.6115896876169291)"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>pdiv</span>","value":"pdiv"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>*</span>","value":"*"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>+</span>","value":"+"},{"type":"html","content":"<span class='clj-double'>0.46432496375496635</span>","value":"0.46432496375496635"},{"type":"html","content":"<span class='clj-double'>0.20478805563991798</span>","value":"0.20478805563991798"}],"value":"(+ 0.46432496375496635 0.20478805563991798)"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>+</span>","value":"+"},{"type":"html","content":"<span class='clj-double'>0.4346356434797921</span>","value":"0.4346356434797921"},{"type":"html","content":"<span class='clj-symbol'>x</span>","value":"x"}],"value":"(+ 0.4346356434797921 x)"}],"value":"(* (+ 0.46432496375496635 0.20478805563991798) (+ 0.4346356434797921 x))"},{"type":"html","content":"<span class='clj-symbol'>x</span>","value":"x"}],"value":"(pdiv (* (+ 0.46432496375496635 0.20478805563991798) (+ 0.4346356434797921 x)) x)"}],"value":"(+ (* 0.23381319819501967 0.6115896876169291) (pdiv (* (+ 0.46432496375496635 0.20478805563991798) (+ 0.4346356434797921 x)) x))"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>pdiv</span>","value":"pdiv"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>*</span>","value":"*"},{"type":"html","content":"<span class='clj-symbol'>x</span>","value":"x"},{"type":"html","content":"<span class='clj-double'>0.7108711265725868</span>","value":"0.7108711265725868"}],"value":"(* x 0.7108711265725868)"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-symbol'>+</span>","value":"+"},{"type":"html","content":"<span class='clj-symbol'>x</span>","value":"x"},{"type":"html","content":"<span class='clj-double'>0.23606573899488503</span>","value":"0.23606573899488503"}],"value":"(+ x 0.23606573899488503)"}],"value":"(pdiv (* x 0.7108711265725868) (+ x 0.23606573899488503))"}],"value":"(+ (+ (* 0.23381319819501967 0.6115896876169291) (pdiv (* (+ 0.46432496375496635 0.20478805563991798) (+ 0.4346356434797921 x)) x)) (pdiv (* x 0.7108711265725868) (+ x 0.23606573899488503)))"}
;; <=
